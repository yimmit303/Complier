[{"name":"g.txt","input":"ADDOP -> [-+]\nMULOP -> [*/]\nNUM -> \\d+\nLP -> [(]\nRP -> [)]\nID -> \\w+\n\nS -> expr \nexpr -> term expr'\nexpr' -> ADDOP term expr' | lambda\nterm -> factor term'\nterm' -> MULOP factor term' | lambda\nfactor -> id_or_func_call | NUM | LP expr RP\nid_or_func_call -> ID id_or_func_call'\nid_or_func_call' -> lambda | LP RP\n","first":{"ADDOP":["ADDOP"],"MULOP":["MULOP"],"NUM":["NUM"],"LP":["LP"],"RP":["RP"],"ID":["ID"],"S":["NUM","LP","ID"],"expr":["NUM","LP","ID"],"expr'":["ADDOP"],"term":["NUM","LP","ID"],"term'":["MULOP"],"factor":["NUM","LP","ID"],"id_or_func_call":["ID"],"id_or_func_call'":["LP"]}},{"name":"g10.txt","input":"NUM -> \\d+\nID -> [A-Za-z]\\w*\nLP -> [(]\nRP -> [)]\nCOMMA -> ,\nADDOP -> [-+]\nMULOP -> [*/]\nEQ -> =\nSEMI -> ;\n\nprogram -> stmt SEMI program | stmt\nstmt -> assign | expr | lambda\nassign -> tuple EQ tuple2\ntuple -> tuple COMMA expr | expr \ntuple2 -> tuple2 COMMA expr | expr \nexpr -> expr ADDOP term | term\nterm -> term MULOP factor | factor\nfactor -> ID | LP expr RP | NUM\n","first":{"NUM":["NUM"],"ID":["ID"],"LP":["LP"],"RP":["RP"],"COMMA":["COMMA"],"ADDOP":["ADDOP"],"MULOP":["MULOP"],"EQ":["EQ"],"SEMI":["SEMI"],"program":["SEMI","ID","LP","NUM"],"stmt":["ID","LP","NUM"],"assign":["ID","LP","NUM"],"tuple":["ID","LP","NUM"],"tuple2":["ID","LP","NUM"],"expr":["ID","LP","NUM"],"term":["ID","LP","NUM"],"factor":["ID","LP","NUM"]}},{"name":"g11.txt","input":"ACT -> \\bact\\b\nROMAN_NUMERAL -> \\b(I{1,3}|IV|VI{0,3}|I?X)\\b\nADJ -> \\b(lovely|ugly|pretty|foul|handsome|disgusting)\\b\nYOU -> \\byou\\b\nARE -> are\nAS -> as\nA -> \\ba\\b\nNOUN -> \\b(king|queen|noble|crown)\\b\nACTOR -> \\b(Romeo|Juliet)\\b\nLB -> \\[\nRB -> \\]\nENTER -> enter\nEXIT -> exit\nIS -> is\nQM -> \\?\nIF -> if\nSO -> so\nCMA -> ,\nLET -> let\nUS -> us\nPROCEED -> proceed\nTO -> to\nSCENE -> scene\nOPEN -> open\nYOUR -> your\nHEART -> heart\nSPEAK -> speak\nMIND -> mind\nPUNC -> [.!]\nCOLON -> :\n\nprogram -> ACT ROMAN_NUMERAL scene_list \nadj_list -> ADJ adj_list | lambda\nassign_sentence -> YOU ARE AS ADJ AS A adj_list NOUN\nbody_list -> body_stmt body_list | lambda\nbody_stmt -> ACTOR COLON sentence_list | LB ENTER ACTOR RB | LB EXIT ACTOR RB\ncomparison_sentence -> IS ACTOR AS ADJ AS ACTOR QM\nconditional_sentence -> IF SO CMA sentence\ngoto_sentence -> LET US PROCEED TO SCENE ROMAN_NUMERAL\nio_sentence -> OPEN YOUR HEART | SPEAK YOUR MIND\nscene_list -> SCENE ROMAN_NUMERAL body_list scene_list | lambda\nsentence_list -> sentence PUNC sentence_list | lambda\nsentence -> io_sentence | assign_sentence | comparison_sentence | goto_sentence | conditional_sentence\n","first":{"ACT":["ACT"],"ROMAN_NUMERAL":["ROMAN_NUMERAL"],"ADJ":["ADJ"],"YOU":["YOU"],"ARE":["ARE"],"AS":["AS"],"A":["A"],"NOUN":["NOUN"],"ACTOR":["ACTOR"],"LB":["LB"],"RB":["RB"],"ENTER":["ENTER"],"EXIT":["EXIT"],"IS":["IS"],"QM":["QM"],"IF":["IF"],"SO":["SO"],"CMA":["CMA"],"LET":["LET"],"US":["US"],"PROCEED":["PROCEED"],"TO":["TO"],"SCENE":["SCENE"],"OPEN":["OPEN"],"YOUR":["YOUR"],"HEART":["HEART"],"SPEAK":["SPEAK"],"MIND":["MIND"],"PUNC":["PUNC"],"COLON":["COLON"],"program":["ACT"],"adj_list":["ADJ"],"assign_sentence":["YOU"],"body_list":["ACTOR","LB"],"body_stmt":["ACTOR","LB"],"comparison_sentence":["IS"],"conditional_sentence":["IF"],"goto_sentence":["LET"],"io_sentence":["OPEN","SPEAK"],"scene_list":["SCENE"],"sentence_list":["OPEN","SPEAK","YOU","IS","LET","IF"],"sentence":["OPEN","SPEAK","YOU","IS","LET","IF"]}},{"name":"g12.txt","input":"x -> x\n\nS -> A\nA -> B\nB -> C\nC -> D\nD -> E\nE -> x | lambda\n","first":{"x":["x"],"S":["x"],"A":["x"],"B":["x"],"C":["x"],"D":["x"],"E":["x"]}},{"name":"g2.txt","input":"x -> x\n\nS -> lambda | x S x\n","first":{"x":["x"],"S":["x"]}},{"name":"g3.txt","input":"x -> x\n\nS -> x | x S x\n","first":{"x":["x"],"S":["x"]}},{"name":"g4.txt","input":"x -> x\n\nS -> A | B x | C\nA -> B x | C\nB -> C x | C\nC -> lambda | C | x\n","first":{"x":["x"],"S":["x"],"A":["x"],"B":["x"],"C":["x"]}},{"name":"g5.txt","input":"x -> x\n\nS -> A | B x | C\nA -> B x \nB -> C x | C\nC -> lambda | C | x\n","first":{"x":["x"],"S":["x"],"A":["x"],"B":["x"],"C":["x"]}},{"name":"g6.txt","input":"ADDOP -> [+]\nAND -> \\band\\b\nCMA -> ,\nCOMMENT -> //[^\\n]*\nDEF -> \\bdef\\b\nELSE -> \\belse\\b\nEQ -> =\nIF -> \\bif\\b\nLB -> \\[\nLBR -> [{]\nLP -> [(]\nMINUS -> -\nMULOP -> [*/]\nNOT -> \\bnot\\b\nNUM -> -?(\\d+|\\d+\\.\\d*|\\.\\d+)([Ee][-+]?\\d+)?\nNUMBER -> \\bnum\\b\nOR -> \\bor\\b\nPRINT -> \\bprint\\b\nRB -> \\]\nRBR -> [}]\nRP -> [)]\nRELOP -> >=|<=|!=|==|>|<\nRETURN -> \\breturn\\b\nSEMI -> ;\nSHIFT -> \\bshift\\b\nSTRING -> \\bstring\\b\nSTRING-CONSTANT -> \"(\\\\\"|[^\"])*\" | '(\\\\'|[^'])*'\nVAR -> \\bvar\\b\nWHILE -> \\bwhile\\b\nID -> [A-Za-z_]\\w*\n\nprogram -> var-decl-list func-decl-list\nfunc-decl-list -> func-decl func-decl-list | lambda\nfunc-decl -> DEF ID LP type-list RP optional-return-spec brace-block\noptional-return-spec -> RETURN type | lambda\nbrace-block -> LBR var-decl-list stmts RBR\ntype-list -> lambda | ID type type-list'\ntype-list' -> CMA ID type type-list' | lambda\ntype -> non-array-type | non-array-type LB size-list RB\nnon-array-type -> NUMBER | STRING\nsize-list -> NUM | NUM CMA size-list\nstmts -> stmt SEMI stmts | lambda\nstmt -> assign SEMI | func-call SEMI | loop | cond | return-stmt SEMI\nreturn-stmt -> RETURN | RETURN expr\nfunc-call -> ID LP optional-expr-list RP | builtin-func-call\nbuiltin-func-call -> PRINT LP expr-list RP | SHIFT LP expr CMA expr RP\noptional-expr-list -> lambda | expr-list\nexpr-list ->  expr expr-list'\nexpr-list' -> lambda | CMA expr expr-list'\nloop -> WHILE LP expr RP brace-block\ncond -> IF expr brace-block | IF expr brace-block ELSE brace-block\nvar-decl-list -> var-decl SEMI var-decl-list | lambda\nvar-decl -> VAR ID type\nexpr -> orexp\norexp -> orexp OR andexp | andexp\nandexp -> andexp AND notexp | notexp\nnotexp -> NOT notexp | rel\nrel -> sum RELOP sum | sum\nsum -> sum ADDOP term | sum MINUS term | term\nterm -> term MULOP neg | neg\nneg -> MINUS neg | factor\nfactor -> ID | NUM | LP expr RP | func-call | ID LB expr-list RB | STRING-CONSTANT\nassign -> ID EQ expr\n","first":{"ADDOP":["ADDOP"],"AND":["AND"],"CMA":["CMA"],"COMMENT":["COMMENT"],"DEF":["DEF"],"ELSE":["ELSE"],"EQ":["EQ"],"IF":["IF"],"LB":["LB"],"LBR":["LBR"],"LP":["LP"],"MINUS":["MINUS"],"MULOP":["MULOP"],"NOT":["NOT"],"NUM":["NUM"],"NUMBER":["NUMBER"],"OR":["OR"],"PRINT":["PRINT"],"RB":["RB"],"RBR":["RBR"],"RP":["RP"],"RELOP":["RELOP"],"RETURN":["RETURN"],"SEMI":["SEMI"],"SHIFT":["SHIFT"],"STRING":["STRING"],"STRING-CONSTANT":["STRING-CONSTANT"],"VAR":["VAR"],"WHILE":["WHILE"],"ID":["ID"],"program":["VAR","DEF"],"func-decl-list":["DEF"],"func-decl":["DEF"],"optional-return-spec":["RETURN"],"brace-block":["LBR"],"type-list":["ID"],"type-list'":["CMA"],"type":["NUMBER","STRING"],"non-array-type":["NUMBER","STRING"],"size-list":["NUM"],"stmts":["ID","WHILE","IF","RETURN","PRINT","SHIFT"],"stmt":["ID","WHILE","IF","RETURN","PRINT","SHIFT"],"return-stmt":["RETURN"],"func-call":["ID","PRINT","SHIFT"],"builtin-func-call":["PRINT","SHIFT"],"optional-expr-list":["NOT","MINUS","ID","NUM","LP","STRING-CONSTANT","PRINT","SHIFT"],"expr-list":["NOT","MINUS","ID","NUM","LP","STRING-CONSTANT","PRINT","SHIFT"],"expr-list'":["CMA"],"loop":["WHILE"],"cond":["IF"],"var-decl-list":["VAR"],"var-decl":["VAR"],"expr":["NOT","MINUS","ID","NUM","LP","STRING-CONSTANT","PRINT","SHIFT"],"orexp":["NOT","MINUS","ID","NUM","LP","STRING-CONSTANT","PRINT","SHIFT"],"andexp":["NOT","MINUS","ID","NUM","LP","STRING-CONSTANT","PRINT","SHIFT"],"notexp":["NOT","MINUS","ID","NUM","LP","STRING-CONSTANT","PRINT","SHIFT"],"rel":["MINUS","ID","NUM","LP","STRING-CONSTANT","PRINT","SHIFT"],"sum":["MINUS","ID","NUM","LP","STRING-CONSTANT","PRINT","SHIFT"],"term":["MINUS","ID","NUM","LP","STRING-CONSTANT","PRINT","SHIFT"],"neg":["MINUS","ID","NUM","LP","STRING-CONSTANT","PRINT","SHIFT"],"factor":["ID","NUM","LP","STRING-CONSTANT","PRINT","SHIFT"],"assign":["ID"]}},{"name":"g7.txt","input":"+ -> [-+]\n* -> [*/]\n( -> [(]\n) -> [)]\nNUM -> \\d+\n\nS -> e\ne -> e + e | t\nt -> t * t | f\nf -> NUM | ( e )\n","first":{"+":["+"],"*":["*"],"(":["("],")":[")"],"NUM":["NUM"],"S":["NUM","("],"e":["NUM","("],"t":["NUM","("],"f":["NUM","("]}},{"name":"g8.txt","input":"ADDOP -> [-+]\nMULOP -> [*/]\nNUM -> \\d+\nLP -> [(]\nRP -> [)]\nID -> \\w+\n\n\nS -> expr \nexpr -> term expr'\nexpr' -> ADDOP term expr' | lambda\nterm -> factor term'\nterm' -> MULOP factor term' | lambda\nfactor -> id_or_func_call | NUM | LP expr RP\nid_or_func_call -> ID id_or_func_call'\nid_or_func_call' -> lambda | LP RP\n","first":{"ADDOP":["ADDOP"],"MULOP":["MULOP"],"NUM":["NUM"],"LP":["LP"],"RP":["RP"],"ID":["ID"],"S":["NUM","LP","ID"],"expr":["NUM","LP","ID"],"expr'":["ADDOP"],"term":["NUM","LP","ID"],"term'":["MULOP"],"factor":["NUM","LP","ID"],"id_or_func_call":["ID"],"id_or_func_call'":["LP"]}},{"name":"g9.txt","input":"x -> x\n\nS -> lambda | S S | x\n","first":{"x":["x"],"S":["x"]}}]