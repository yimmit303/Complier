grammar gram;
COMMENT : '//'~[\n]* -> skip;
SEMI : ';';
WHILE : 'while';
LP : '(';
RP : ')';
IF : 'if';
ELSE : 'else';
RETURN : 'return';
LBR : '{';
RBR : '}';
FPNUM : '-'? [0-9]+ '.' [0-9]+;
NUM : '-'? [0-9]+ ;
OR : 'or';
AND : 'and';
NOT : 'not';
RELOP : '>='|'<='|'>'|'<'|'!='|'==';
EQ : '=';
PLUS : '+';
MULOP : [*/] ;
MINUS : '-';
CMA : ',';
TYPE : 'int'|'string'|'double';
STRING_CONSTANT : '"' ( '\\"' | ~["] )* '"' ;
PRINT : 'print';
INPUT : 'input';
OPEN : 'open';
READ : 'bread';
WRITE : 'write';
CLOSE : 'close';
ID : [A-Za-z]+ ;
WHITESPACE : ( ' ' | '\t' | '\n' | '\r' )+ -> skip   ;

start : program EOF ;
program : var_decl_list braceblock;
stmts : stmt stmts | ;
stmt : cond | loop | return_stmt SEMI | assign SEMI | func_call SEMI;
loop : WHILE LP expr RP braceblock;
cond : IF LP expr RP braceblock | IF LP expr RP braceblock ELSE braceblock;
braceblock : LBR stmts RBR;
return_stmt : RETURN expr;
expr : orexp;
orexp : orexp OR andexp | andexp ;
andexp : andexp AND notexp | notexp;
notexp :  NOT notexp | rel;
rel : sum RELOP sum | sum;
sum :  sum PLUS term | sum MINUS term | term;
term :  term MULOP neg | neg;
neg :  MINUS neg | factor;
factor :  NUM | LP expr RP | FPNUM | ID | STRING_CONSTANT | func_call;
var_decl_list : var_decl SEMI var_decl_list | ;
var_decl : TYPE ID;
assign : ID EQ expr;
func_call : builtin_func_call | user_func_call;
user_func_call : ID LP optional_exprlist RP;
optional_exprlist :  | exprlist;
exprlist : exprlist CMA expr | expr;
builtin_func_call : PRINT LP expr RP | INPUT LP RP | OPEN LP expr RP | READ LP expr RP | WRITE LP expr CMA expr CMA expr RP | WRITE LP expr CMA expr RP | CLOSE LP expr RP;