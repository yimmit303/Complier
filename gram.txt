grammar gram;
COMMENT : '//'~[\n]* -> skip;
SEMI : ';';
WHILE : 'while';
LP : '(';
RP : ')';
IF : 'if';
ELSE : 'else';
RETURN : 'return';
LBR : '{';
RBR : '}';
FPNUM : ([0-9]+ '.' [0-9]* | '.' [0-9]+ )([Ee][\-+]?[0-9]+ )? | '-'?[0-9]+ [Ee][\-+]?[0-9]+ ;
NUM : [0-9]+ ;
OR : 'or';
AND : 'and';
NOT : 'not';
RELOP : '>='|'<='|'>'|'<'|'!='|'==';
EQ : '=';
PLUS : '+';
MULOP : [*/%] ;
MINUS : '-';
CMA : ',';
TYPE : 'int'|'string'|'double';
STRING_CONSTANT : '"' ( '\\"' | ~["] )* '"' ;
PRINT : 'print';
INPUT : 'input';
OPEN : 'open';
READ : 'read';
WRITE : 'write';
CLOSE : 'close';
ID : [A-Za-z]+ ;
WHITESPACE : ( ' ' | '\t' | '\n' | '\r' )+ -> skip ;

program : braceblock;
stmts : stmt stmts | ;
stmt : cond | loop | return_stmt SEMI;
cond : IF LP expr RP braceblock | IF LP expr RP braceblock ELSE braceblock;
loop : WHILE LP expr RP braceblock;
braceblock : LBR stmts RBR;
expr : orexp;
orexp : orexp OR andexp | andexp;
andexp : andexp AND notexp | notexp;
notexp : NOT notexp | rel;
rel : sum RELOP sum | sum;
sum : sum PLUS term | sum MINUS term | term;
term : term MULOP neg | neg;
neg : MINUS neg | cast;
cast : LP TYPE RP cast | factor ;
factor : NUM | FPNUM | LP expr RP;
return_stmt : RETURN expr;